# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bithub_service_pb2 as bithub__service__pb2


class BithubServiceStub(object):
    """The BithubService service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WritePRDescription = channel.unary_unary(
                '/bithub.BithubService/WritePRDescription',
                request_serializer=bithub__service__pb2.PRDescriptionRequest.SerializeToString,
                response_deserializer=bithub__service__pb2.PRDescriptionResponse.FromString,
                )
        self.SmartAutocomplete = channel.unary_unary(
                '/bithub.BithubService/SmartAutocomplete',
                request_serializer=bithub__service__pb2.SmartAutocompleteRequest.SerializeToString,
                response_deserializer=bithub__service__pb2.SmartAutocompleteResponse.FromString,
                )
        self.ChatGPTForCode = channel.unary_unary(
                '/bithub.BithubService/ChatGPTForCode',
                request_serializer=bithub__service__pb2.ChatGPTCodeTaskRequest.SerializeToString,
                response_deserializer=bithub__service__pb2.ChatGPTCodeTaskResponse.FromString,
                )
        self.VirtualPairProgramming = channel.stream_stream(
                '/bithub.BithubService/VirtualPairProgramming',
                request_serializer=bithub__service__pb2.PairProgrammingRequest.SerializeToString,
                response_deserializer=bithub__service__pb2.PairProgrammingResponse.FromString,
                )


class BithubServiceServicer(object):
    """The BithubService service definition.
    """

    def WritePRDescription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SmartAutocomplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatGPTForCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VirtualPairProgramming(self, request_iterator, context):
        """showed stream for conversation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BithubServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WritePRDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.WritePRDescription,
                    request_deserializer=bithub__service__pb2.PRDescriptionRequest.FromString,
                    response_serializer=bithub__service__pb2.PRDescriptionResponse.SerializeToString,
            ),
            'SmartAutocomplete': grpc.unary_unary_rpc_method_handler(
                    servicer.SmartAutocomplete,
                    request_deserializer=bithub__service__pb2.SmartAutocompleteRequest.FromString,
                    response_serializer=bithub__service__pb2.SmartAutocompleteResponse.SerializeToString,
            ),
            'ChatGPTForCode': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatGPTForCode,
                    request_deserializer=bithub__service__pb2.ChatGPTCodeTaskRequest.FromString,
                    response_serializer=bithub__service__pb2.ChatGPTCodeTaskResponse.SerializeToString,
            ),
            'VirtualPairProgramming': grpc.stream_stream_rpc_method_handler(
                    servicer.VirtualPairProgramming,
                    request_deserializer=bithub__service__pb2.PairProgrammingRequest.FromString,
                    response_serializer=bithub__service__pb2.PairProgrammingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bithub.BithubService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BithubService(object):
    """The BithubService service definition.
    """

    @staticmethod
    def WritePRDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bithub.BithubService/WritePRDescription',
            bithub__service__pb2.PRDescriptionRequest.SerializeToString,
            bithub__service__pb2.PRDescriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SmartAutocomplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bithub.BithubService/SmartAutocomplete',
            bithub__service__pb2.SmartAutocompleteRequest.SerializeToString,
            bithub__service__pb2.SmartAutocompleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatGPTForCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bithub.BithubService/ChatGPTForCode',
            bithub__service__pb2.ChatGPTCodeTaskRequest.SerializeToString,
            bithub__service__pb2.ChatGPTCodeTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VirtualPairProgramming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/bithub.BithubService/VirtualPairProgramming',
            bithub__service__pb2.PairProgrammingRequest.SerializeToString,
            bithub__service__pb2.PairProgrammingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
