type Query {
  pullRequestById(id: ID!): PullRequest # Fetch a single pull request by its ID
  pullRequests(filters: PullRequestFilter): [PullRequest] # Retrieve multiple pull requests based on specified filters
  commentsByPullRequest(pullRequestId: ID!): [Comment] # Get all comments associated with a specific pull request
}

type Mutation {
  createPullRequest(input: CreatePullRequestInput!): PullRequest # Create a new pull request
  addCommentToPullRequest(input: AddCommentInput!): Comment # Add a comment to a pull request
  addReactionToComment(input: AddReactionInput!): Comment # Add a reaction to a specific comment
  removeReactionFromComment(input: RemoveReactionInput!): Comment # Remove a reaction from a comment
  mergePullRequest(id: ID!): PullRequest # Merge a specified pull request
  rejectPullRequest(id: ID!): PullRequest # Reject a specified pull request
}

type PullRequest {
  id: ID!
  title: String!
  createdAt: String!
  description: String!
  sourceCommit: String!
  targetBranch: String!
  status: String!
  statusMessage: String!
  user: User! # The user who created the pull request
  comments: [Comment] # Comments on the pull request
  fileChanges: [FileChange] # Files changed in the pull request
}

type FileChange {
  id: ID!
  fileName: String!
  changes: String!
  changedLines: [ChangedLine]
  # fullContent: [String] # Represents the full content of the file after changes
}

type ChangedLine {
  line: Int! # Line number in the file
  code: String! # Code content of the line
  type: String! # Type of change: '+' for additions, '-' for deletions
  comments: [Comment] # Comments associated with the line
}

type Comment {
  id: ID!
  userId: ID!
  content: String!
  reactions: [UserReaction] # Reactions to the comment
  reactionCounts: [ReactionCount] # Aggregated count of reactions
}

type UserReaction {
  userId: ID!
  reaction: String! # Type of reaction (like, dislike, etc.)
}

type ReactionCount {
  reaction: String!
  count: Int! # Number of times this reaction was made
}

type User {
  id: ID!
  name: String!
  email: String!
}

input PullRequestFilter {
  status: String # Filter pull requests by their status (open, closed, etc.)
}

input CreatePullRequestInput {
  title: String!
  description: String!
  sourceCommit: String!
  targetBranch: String!
  user: UserInput! # Information about the user creating the pull request
}

input UserInput {
  id: ID!
}

input AddReactionInput {
  id: ID!
  userId: ID!
  reaction: String! # Type of reaction to be added
}

input AddCommentInput {
  pullRequestId: ID!
  content: String!
  lineNumber: Int # Optional line number for inline comments
  userId: ID!
}

input RemoveReactionInput {
  commentId: ID!
  userId: ID! # User ID to identify who is removing the reaction
}
