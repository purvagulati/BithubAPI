type Query {
  pullRequestById(id: ID!): PullRequest
  pullRequests(filters: PullRequestFilter): [PullRequest]
  commentsByPullRequest(pullRequestId: ID!): [Comment]
}

type Mutation {
  createPullRequest(input: CreatePullRequestInput!): PullRequest
  addCommentToPullRequest(input: AddCommentInput!): Comment
  addReactionToComment(input: AddReactionInput!): Comment
  mergePullRequest(id: ID!): PullRequest
  rejectPullRequest(id: ID!): PullRequest
}

type PullRequest {
  id: ID!
  title: String!
  createdAt: String!
  description: String!
  sourceCommit: String!
  targetBranch: String!
  status: String!
  statusMessage: String!
  user: User!
  comments: [Comment]
  fileChanges: [FileChange]
}

type FileChange {
  id: ID!
  fileName: String!
  changes: String!
  changedLines: [ChangedLine]
  # fullContent: [String] # Added to represent the full file content
}

type ChangedLine {
  line: Int!
  code: String!
  type: String! # '+' for additions, '-' for deletions
  comments: [Comment]
}

type Comment {
  id: ID!
  userId: ID!
  content: String!
  reactions: [UserReaction] 
  reactionCounts: [ReactionCount] 
}

type UserReaction {
  userId: ID!
  reaction: String!
}

type ReactionCount {
  reaction: String!
  count: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
}

input PullRequestFilter {
  status: String
}

input CreatePullRequestInput {
  title: String!
  description: String!
  sourceCommit: String!
  targetBranch: String!
  user: UserInput!
}

input UserInput {
  id: ID!
}

input AddReactionInput {
  id: ID!
  userId: ID! 
  reaction: String!
}

input AddCommentInput {
  pullRequestId: ID!
  content: String!
  lineNumber: Int
  userId: ID!
}

